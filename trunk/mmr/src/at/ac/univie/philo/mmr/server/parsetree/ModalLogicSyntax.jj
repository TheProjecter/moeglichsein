/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. ModalLogicSyntax.jj */
/*@egen*//**
 * JJTree template file created by SF JavaCC plugin 1.5.17+ wizard for JavaCC 1.5.0+
 */options{  JDK_VERSION = "1.5";
  STATIC=false;
                 
             
                         }PARSER_BEGIN(crflang)package at.ac.univie.philosophie.crf.parsetree;

public class crflang/*@bgen(jjtree)*/implements crflangTreeConstants/*@egen*/{/*@bgen(jjtree)*/
  protected JJTcrflangState jjtree = new JJTcrflangState();

/*@egen*///  public static void main(String args [])//  {//    System.out.println("Reading from standard input...");//    System.out.print("Enter an expression like \"1+(2+3)*var;\" :");//    new crflang(System.in);//    try//    {//      SimpleNode n = crflang.predLogic();//      n.dump("");//      System.out.println("Thank you.");//    }//    catch (Exception e)//    {//      System.out.println("Oops.");//      System.out.println(e.getMessage());//    }//    catch (Error e)//    {//      System.out.println("Oops.");//      System.out.println(e.getMessage());//    }//  }}PARSER_END(crflang)
SimpleNode predLogic()            : {/*@bgen(jjtree) expression */
  ASTexpression jjtn000 = new ASTexpression(JJTEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) expression */
                                         try {
/*@egen*/ formular() (< EOF >|"\r")/*@bgen(jjtree)*/
                                                                   {
                                                                     jjtree.closeNodeScope(jjtn000, true);
                                                                     jjtc000 = false;
                                                                   }
/*@egen*/ { return jjtn000; }/*@bgen(jjtree)*/
                                         } catch (Throwable jjte000) {
                                           if (jjtc000) {
                                             jjtree.clearNodeScope(jjtn000);
                                             jjtc000 = false;
                                           } else {
                                             jjtree.popNode();
                                           }
                                           if (jjte000 instanceof RuntimeException) {
                                             throw (RuntimeException)jjte000;
                                           }
                                           if (jjte000 instanceof ParseException) {
                                             throw (ParseException)jjte000;
                                           }
                                           throw (Error)jjte000;
                                         } finally {
                                           if (jjtc000) {
                                             jjtree.closeNodeScope(jjtn000, true);
                                           }
                                         }
/*@egen*/}

void formular() : {} { biconditional() }

void truthvalue()            : {/*@bgen(jjtree) truthvalue */
  ASTtruthvalue jjtn000 = new ASTtruthvalue(JJTTRUTHVALUE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) truthvalue */
   try {
/*@egen*/   <TRUE >/*@bgen(jjtree)*/
           {
             jjtree.closeNodeScope(jjtn000, true);
             jjtc000 = false;
           }
/*@egen*/ {jjtn000.setValue("TRUE");} | < FALSE >/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/  {jjtn000.setValue("FALSE");}/*@bgen(jjtree)*/
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/}

void biconditional() : {}{
  implication() ( < BICONDITIONAL >/*@bgen(jjtree) #biconditional( 2) */
                                    {
                                      ASTbiconditional jjtn001 = new ASTbiconditional(JJTBICONDITIONAL);
                                      boolean jjtc001 = true;
                                      jjtree.openNodeScope(jjtn001);
                                    }
                                    try {
/*@egen*/ implication()/*@bgen(jjtree)*/
                                    } catch (Throwable jjte001) {
                                      if (jjtc001) {
                                        jjtree.clearNodeScope(jjtn001);
                                        jjtc001 = false;
                                      } else {
                                        jjtree.popNode();
                                      }
                                      if (jjte001 instanceof RuntimeException) {
                                        throw (RuntimeException)jjte001;
                                      }
                                      if (jjte001 instanceof ParseException) {
                                        throw (ParseException)jjte001;
                                      }
                                      throw (Error)jjte001;
                                    } finally {
                                      if (jjtc001) {
                                        jjtree.closeNodeScope(jjtn001,  2);
                                      }
                                    }
/*@egen*/                   )*}

void negation()              : {/*@bgen(jjtree) #negation( 1) */
  ASTnegation jjtn000 = new ASTnegation(JJTNEGATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) #negation( 1) */
                                    try {
/*@egen*/ < NOT > sentence()/*@bgen(jjtree)*/
                                    } catch (Throwable jjte000) {
                                      if (jjtc000) {
                                        jjtree.clearNodeScope(jjtn000);
                                        jjtc000 = false;
                                      } else {
                                        jjtree.popNode();
                                      }
                                      if (jjte000 instanceof RuntimeException) {
                                        throw (RuntimeException)jjte000;
                                      }
                                      if (jjte000 instanceof ParseException) {
                                        throw (ParseException)jjte000;
                                      }
                                      throw (Error)jjte000;
                                    } finally {
                                      if (jjtc000) {
                                        jjtree.closeNodeScope(jjtn000,  1);
                                      }
                                    }
/*@egen*/ }

void conjunction() : {} { xor() (< AND >/*@bgen(jjtree) #conjunction( 2) */
                                         {
                                           ASTconjunction jjtn001 = new ASTconjunction(JJTCONJUNCTION);
                                           boolean jjtc001 = true;
                                           jjtree.openNodeScope(jjtn001);
                                         }
                                         try {
/*@egen*/ xor()/*@bgen(jjtree)*/
                                         } catch (Throwable jjte001) {
                                           if (jjtc001) {
                                             jjtree.clearNodeScope(jjtn001);
                                             jjtc001 = false;
                                           } else {
                                             jjtree.popNode();
                                           }
                                           if (jjte001 instanceof RuntimeException) {
                                             throw (RuntimeException)jjte001;
                                           }
                                           if (jjte001 instanceof ParseException) {
                                             throw (ParseException)jjte001;
                                           }
                                           throw (Error)jjte001;
                                         } finally {
                                           if (jjtc001) {
                                             jjtree.closeNodeScope(jjtn001,  2);
                                           }
                                         }
/*@egen*/                 )* }


void disjunction() : {} { conjunction() ( < OR >/*@bgen(jjtree) #disjunction( 2) */
                                                 {
                                                   ASTdisjunction jjtn001 = new ASTdisjunction(JJTDISJUNCTION);
                                                   boolean jjtc001 = true;
                                                   jjtree.openNodeScope(jjtn001);
                                                 }
                                                 try {
/*@egen*/ conjunction()/*@bgen(jjtree)*/
                                                 } catch (Throwable jjte001) {
                                                   if (jjtc001) {
                                                     jjtree.clearNodeScope(jjtn001);
                                                     jjtc001 = false;
                                                   } else {
                                                     jjtree.popNode();
                                                   }
                                                   if (jjte001 instanceof RuntimeException) {
                                                     throw (RuntimeException)jjte001;
                                                   }
                                                   if (jjte001 instanceof ParseException) {
                                                     throw (ParseException)jjte001;
                                                   }
                                                   throw (Error)jjte001;
                                                 } finally {
                                                   if (jjtc001) {
                                                     jjtree.closeNodeScope(jjtn001,  2);
                                                   }
                                                 }
/*@egen*/                 )* }

void implication() : {} { disjunction() ( < IMPLICATION >/*@bgen(jjtree) #implication( 2) */
                                                          {
                                                            ASTimplication jjtn001 = new ASTimplication(JJTIMPLICATION);
                                                            boolean jjtc001 = true;
                                                            jjtree.openNodeScope(jjtn001);
                                                          }
                                                          try {
/*@egen*/ disjunction()/*@bgen(jjtree)*/
                                                          } catch (Throwable jjte001) {
                                                            if (jjtc001) {
                                                              jjtree.clearNodeScope(jjtn001);
                                                              jjtc001 = false;
                                                            } else {
                                                              jjtree.popNode();
                                                            }
                                                            if (jjte001 instanceof RuntimeException) {
                                                              throw (RuntimeException)jjte001;
                                                            }
                                                            if (jjte001 instanceof ParseException) {
                                                              throw (ParseException)jjte001;
                                                            }
                                                            throw (Error)jjte001;
                                                          } finally {
                                                            if (jjtc001) {
                                                              jjtree.closeNodeScope(jjtn001,  2);
                                                            }
                                                          }
/*@egen*/                 )* }

void xor() : {} { sentence() ( < XOR >/*@bgen(jjtree) #xor( 2) */
                                       {
                                         ASTxor jjtn001 = new ASTxor(JJTXOR);
                                         boolean jjtc001 = true;
                                         jjtree.openNodeScope(jjtn001);
                                       }
                                       try {
/*@egen*/ sentence()/*@bgen(jjtree)*/
                                       } catch (Throwable jjte001) {
                                         if (jjtc001) {
                                           jjtree.clearNodeScope(jjtn001);
                                           jjtc001 = false;
                                         } else {
                                           jjtree.popNode();
                                         }
                                         if (jjte001 instanceof RuntimeException) {
                                           throw (RuntimeException)jjte001;
                                         }
                                         if (jjte001 instanceof ParseException) {
                                           throw (ParseException)jjte001;
                                         }
                                         throw (Error)jjte001;
                                       } finally {
                                         if (jjtc001) {
                                           jjtree.closeNodeScope(jjtn001,  2);
                                         }
                                       }
/*@egen*/         )* }

void sentence() : {}
{
  truthvalue() | predicate() | negation() | "(" formular() ")" | quantification() | box() | diamond()
}

SimpleNode term() : {SimpleNode n = null;} { (n = variable() | n = constant() | n = function()) { return n; }}

ASTvariable variable()          : {/*@bgen(jjtree) variable */
                                   ASTvariable jjtn000 = new ASTvariable(JJTVARIABLE);
                                   boolean jjtc000 = true;
                                   jjtree.openNodeScope(jjtn000);
/*@egen*/Token t; Token i;} {/*@bgen(jjtree) variable */
                                                        try {
/*@egen*/ (t = "x" | t = "y" | t = "z") {jjtn000.setName(t.image); }  ("_" i = index() {jjtn000.setIndex(i.image); } )?/*@bgen(jjtree)*/
                                                                                                                                                                      {
                                                                                                                                                                        jjtree.closeNodeScope(jjtn000, true);
                                                                                                                                                                        jjtc000 = false;
                                                                                                                                                                      }
/*@egen*/ { return jjtn000; }/*@bgen(jjtree)*/
                                                        } catch (Throwable jjte000) {
                                                          if (jjtc000) {
                                                            jjtree.clearNodeScope(jjtn000);
                                                            jjtc000 = false;
                                                          } else {
                                                            jjtree.popNode();
                                                          }
                                                          if (jjte000 instanceof RuntimeException) {
                                                            throw (RuntimeException)jjte000;
                                                          }
                                                          if (jjte000 instanceof ParseException) {
                                                            throw (ParseException)jjte000;
                                                          }
                                                          throw (Error)jjte000;
                                                        } finally {
                                                          if (jjtc000) {
                                                            jjtree.closeNodeScope(jjtn000, true);
                                                          }
                                                        }
/*@egen*/}

Token index() : {Token t;} {t=<INT> { return t; }}

void predicate()            :
{/*@bgen(jjtree) predicate */
        ASTpredicate jjtn000 = new ASTpredicate(JJTPREDICATE);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
/*@egen*/
  	ASTpredicatename predicatename;
  	SimpleNode aterm;
}
{/*@bgen(jjtree) predicate */
  try {
/*@egen*/
  predicatename = predicatename() { jjtn000.setPredicate(predicatename); } "(" aterm = term() { jjtn000.addTerm(aterm); } ("," aterm = term() { jjtn000.addTerm(aterm); })* ")"/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}

ASTpredicatename predicatename()                :{/*@bgen(jjtree) predicatename */
  ASTpredicatename jjtn000 = new ASTpredicatename(JJTPREDICATENAME);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  Token arity;
  Token index;
  Token name;
}
{/*@bgen(jjtree) predicatename */
  try {
/*@egen*/
  name = < NAME > { jjtn000.setName(name.image); } "^" arity = index()  { jjtn000.setArity(arity.image); } ("_" index = index() { jjtn000.setIndex(index.image); })?/*@bgen(jjtree)*/
 {
   jjtree.closeNodeScope(jjtn000, true);
   jjtc000 = false;
 }
/*@egen*/
 { return jjtn000; }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

ASTconstant constant()           : {/*@bgen(jjtree) constant */
                                    ASTconstant jjtn000 = new ASTconstant(JJTCONSTANT);
                                    boolean jjtc000 = true;
                                    jjtree.openNodeScope(jjtn000);
/*@egen*/Token n; Token i;} {/*@bgen(jjtree) constant */
                                                         try {
/*@egen*/ n = "a" { jjtn000.setName(n.image);} ("_" i = index() { jjtn000.setIndex(i.image);} )?/*@bgen(jjtree)*/
                                                                                                                                                 {
                                                                                                                                                   jjtree.closeNodeScope(jjtn000, true);
                                                                                                                                                   jjtc000 = false;
                                                                                                                                                 }
/*@egen*/  { return jjtn000; }/*@bgen(jjtree)*/
                                                         } catch (Throwable jjte000) {
                                                           if (jjtc000) {
                                                             jjtree.clearNodeScope(jjtn000);
                                                             jjtc000 = false;
                                                           } else {
                                                             jjtree.popNode();
                                                           }
                                                           if (jjte000 instanceof RuntimeException) {
                                                             throw (RuntimeException)jjte000;
                                                           }
                                                           if (jjte000 instanceof ParseException) {
                                                             throw (ParseException)jjte000;
                                                           }
                                                           throw (Error)jjte000;
                                                         } finally {
                                                           if (jjtc000) {
                                                             jjtree.closeNodeScope(jjtn000, true);
                                                           }
                                                         }
/*@egen*/ }

ASTfunction function()           :
{/*@bgen(jjtree) function */
    ASTfunction jjtn000 = new ASTfunction(JJTFUNCTION);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    ASTfunctionname functionname;
  	SimpleNode aterm;
  }
{/*@bgen(jjtree) function */
  try {
/*@egen*/ functionname = functionname() { jjtn000.setFunction(functionname); } "(" aterm = term() { jjtn000.addTerm(aterm); } ("," aterm = term() { jjtn000.addTerm(aterm); } )* ")"/*@bgen(jjtree)*/
                                                                                                                                                                              {
                                                                                                                                                                                jjtree.closeNodeScope(jjtn000, true);
                                                                                                                                                                                jjtc000 = false;
                                                                                                                                                                              }
/*@egen*/  { return jjtn000; }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}

ASTfunctionname functionname()               :
{/*@bgen(jjtree) functionname */
  ASTfunctionname jjtn000 = new ASTfunctionname(JJTFUNCTIONNAME);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  Token arity;
  Token index;
  Token name;
  }{/*@bgen(jjtree) functionname */
  try {
/*@egen*/
  name = < FNAME > { jjtn000.setName(name.image); } "^" arity = index() { jjtn000.setArity(arity.image); } ("_" index = index() { jjtn000.setIndex(index.image); } )?/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/  { return jjtn000; }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void quantification() : {} { allquantor() | existencequantor() }

void allquantor()               : {/*@bgen(jjtree) #allquantor( 2) */
  ASTallquantor jjtn000 = new ASTallquantor(JJTALLQUANTOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) #allquantor( 2) */
                                       try {
/*@egen*/ <FORALL > variable() sentence()/*@bgen(jjtree)*/
                                       } catch (Throwable jjte000) {
                                         if (jjtc000) {
                                           jjtree.clearNodeScope(jjtn000);
                                           jjtc000 = false;
                                         } else {
                                           jjtree.popNode();
                                         }
                                         if (jjte000 instanceof RuntimeException) {
                                           throw (RuntimeException)jjte000;
                                         }
                                         if (jjte000 instanceof ParseException) {
                                           throw (ParseException)jjte000;
                                         }
                                         throw (Error)jjte000;
                                       } finally {
                                         if (jjtc000) {
                                           jjtree.closeNodeScope(jjtn000,  2);
                                         }
                                       }
/*@egen*/  }

void existencequantor()                      : {/*@bgen(jjtree) #existencequantor( 2) */
  ASTexistencequantor jjtn000 = new ASTexistencequantor(JJTEXISTENCEQUANTOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) #existencequantor( 2) */
                                                    try {
/*@egen*/ <EXISTS > variable() sentence()/*@bgen(jjtree)*/
                                                    } catch (Throwable jjte000) {
                                                      if (jjtc000) {
                                                        jjtree.clearNodeScope(jjtn000);
                                                        jjtc000 = false;
                                                      } else {
                                                        jjtree.popNode();
                                                      }
                                                      if (jjte000 instanceof RuntimeException) {
                                                        throw (RuntimeException)jjte000;
                                                      }
                                                      if (jjte000 instanceof ParseException) {
                                                        throw (ParseException)jjte000;
                                                      }
                                                      throw (Error)jjte000;
                                                    } finally {
                                                      if (jjtc000) {
                                                        jjtree.closeNodeScope(jjtn000,  2);
                                                      }
                                                    }
/*@egen*/  }


void box()         : {/*@bgen(jjtree) #box( 1) */
  ASTbox jjtn000 = new ASTbox(JJTBOX);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) #box( 1) */
  try {
/*@egen*/
  < BOX > sentence()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000,  1);
    }
  }
/*@egen*/ 
}

void diamond()             : {/*@bgen(jjtree) #diamond( 1) */
  ASTdiamond jjtn000 = new ASTdiamond(JJTDIAMOND);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) #diamond( 1) */
  try {
/*@egen*/
  < DIAMOND > sentence()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000,  1);
    }
  }
/*@egen*/ 
}

SKIP : { " " | "\t" | "\n" }

//SKIP ://{//  " "//| "\t"//| "\n"//| "\r"//| < "//" (~[ "\n", "\r" ])*//    (//      "\n"//    | "\r"//    | "\r\n"//    ) >//| < "/*" (~[ "*" ])* "*"//    (//      ~[ "/" ] (~[ "*" ])* "*"//    )*//    "/" >//}//TOKEN : /* LITERALS */{  < INT : (["0" - "9"])+ >}

TOKEN :{ < NAME : (["A"-"Z"])+ > |
 < FNAME : (["a"-"z"])+ >}

TOKEN :
{
	< OR: "\\vee" >  |
	< AND: "\\wedge" >     |
	< NOT: "\\neg" > |
	< XOR: "\\oplus" > |
	< EXISTS: "\\exists" >  |
	< FORALL: "\\forall" > |
	< IMPLICATION: "\\rightarrow" > |
	< BICONDITIONAL: "\\leftrightarrow"> |
	< TRUE:  "\\top" > |
	< FALSE:  "\\bot" > |
	< BOX: "\\box" > |
	< DIAMOND: "\\diamond" >
}


//////SimpleNode Start() ://{}//{//  Expression() ";"//  {//    return jjtThis;//  }//}////void Expression() ://{}//{//  AdditiveExpression()//}////void AdditiveExpression() ://{}//{//  MultiplicativeExpression()//  (//    (//      "+"//    | "-"//    )//    MultiplicativeExpression()//  )*//}////void MultiplicativeExpression() ://{}//{//  UnaryExpression()//  (//    (//      "*"//    | "/"//    | "%"//    )//    UnaryExpression()//  )*//}void Integer() :{}{  < INT >}
