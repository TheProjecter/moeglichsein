/* Generated By:JJTree: Do not edit this line. ASTpredicate.java Version 4.3 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=true,TRACK_TOKENS=false,NODE_PREFIX=AST,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
package at.ac.univie.philo.mmr.server.parsetree;

import java.util.ArrayList;

public
class ASTpredicate extends SimpleNode {
  
  ASTpredicatename pn;
  ArrayList<SimpleNode> termlist;
  SimpleNode aterm = null;  
	
  public ASTpredicate(int id) {
    super(id);
    termlist = new ArrayList<SimpleNode>();
  }

  public ASTpredicate(crflang p, int id) {
    super(p, id);
  }

  
  public void setPredicate(ASTpredicatename pn) {
	  this.pn = pn;
  }
  
  public Integer getArity() {
	  return pn.getArity();
  }
  
  public Integer getIndex() {
	  return pn.getIndex();
  }
  
  public String getName() {
	  return pn.getName();
  }
  
  public void addTerm(SimpleNode term) {
	  termlist.add(term);
  }
  
  public ArrayList<SimpleNode> getTerms() {
	  return termlist;
  }

  /** Accept the visitor. **/
  public Object jjtAccept(crflangVisitor visitor, Object data) {
    return visitor.visit(this, data);
  }
}
/* JavaCC - OriginalChecksum=350f3ff2bfa04bd2fefdcf41b418a1f9 (do not edit this line) */
