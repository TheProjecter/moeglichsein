/* Generated By:JJTree&JavaCC: Do not edit this line. crflang.java */
package at.ac.univie.philo.mmr.server.parsetree;

public class crflang/*@bgen(jjtree)*/implements crflangTreeConstants, crflangConstants {/*@bgen(jjtree)*/
  protected JJTcrflangState jjtree = new JJTcrflangState();

  final public SimpleNode predLogic() throws ParseException {
                                     /*@bgen(jjtree) expression */
  ASTexpression jjtn000 = new ASTexpression(JJTEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      formular();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 0:
        jj_consume_token(0);
        break;
      case 1:
        jj_consume_token(1);
        break;
      default:
        jj_la1[0] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                                                                     jjtree.closeNodeScope(jjtn000, true);
                                                                     jjtc000 = false;
                                                                     {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
                                           if (jjtc000) {
                                             jjtree.clearNodeScope(jjtn000);
                                             jjtc000 = false;
                                           } else {
                                             jjtree.popNode();
                                           }
                                           if (jjte000 instanceof RuntimeException) {
                                             {if (true) throw (RuntimeException)jjte000;}
                                           }
                                           if (jjte000 instanceof ParseException) {
                                             {if (true) throw (ParseException)jjte000;}
                                           }
                                           {if (true) throw (Error)jjte000;}
    } finally {
                                           if (jjtc000) {
                                             jjtree.closeNodeScope(jjtn000, true);
                                           }
    }
    throw new Error("Missing return statement in function");
  }

  final public void formular() throws ParseException {
    biconditional();
  }

  final public void truthvalue() throws ParseException {
                                /*@bgen(jjtree) truthvalue */
  ASTtruthvalue jjtn000 = new ASTtruthvalue(JJTTRUTHVALUE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TRUE:
        jj_consume_token(TRUE);
             jjtree.closeNodeScope(jjtn000, true);
             jjtc000 = false;
            jjtn000.setValue("TRUE");
        break;
      case FALSE:
        jj_consume_token(FALSE);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
   jjtn000.setValue("FALSE");
        break;
      default:
        jj_la1[1] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
  }

  final public void biconditional() throws ParseException {
    implication();
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BICONDITIONAL:
        ;
        break;
      default:
        jj_la1[2] = jj_gen;
        break label_1;
      }
      jj_consume_token(BICONDITIONAL);
                                      ASTbiconditional jjtn001 = new ASTbiconditional(JJTBICONDITIONAL);
                                      boolean jjtc001 = true;
                                      jjtree.openNodeScope(jjtn001);
      try {
        implication();
      } catch (Throwable jjte001) {
                                      if (jjtc001) {
                                        jjtree.clearNodeScope(jjtn001);
                                        jjtc001 = false;
                                      } else {
                                        jjtree.popNode();
                                      }
                                      if (jjte001 instanceof RuntimeException) {
                                        {if (true) throw (RuntimeException)jjte001;}
                                      }
                                      if (jjte001 instanceof ParseException) {
                                        {if (true) throw (ParseException)jjte001;}
                                      }
                                      {if (true) throw (Error)jjte001;}
      } finally {
                                      if (jjtc001) {
                                        jjtree.closeNodeScope(jjtn001,  2);
                                      }
      }
    }
  }

  final public void negation() throws ParseException {
                                /*@bgen(jjtree) #negation( 1) */
  ASTnegation jjtn000 = new ASTnegation(JJTNEGATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(NOT);
      sentence();
    } catch (Throwable jjte000) {
                                      if (jjtc000) {
                                        jjtree.clearNodeScope(jjtn000);
                                        jjtc000 = false;
                                      } else {
                                        jjtree.popNode();
                                      }
                                      if (jjte000 instanceof RuntimeException) {
                                        {if (true) throw (RuntimeException)jjte000;}
                                      }
                                      if (jjte000 instanceof ParseException) {
                                        {if (true) throw (ParseException)jjte000;}
                                      }
                                      {if (true) throw (Error)jjte000;}
    } finally {
                                      if (jjtc000) {
                                        jjtree.closeNodeScope(jjtn000,  1);
                                      }
    }
  }

  final public void conjunction() throws ParseException {
    xor();
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AND:
        ;
        break;
      default:
        jj_la1[3] = jj_gen;
        break label_2;
      }
      jj_consume_token(AND);
                                           ASTconjunction jjtn001 = new ASTconjunction(JJTCONJUNCTION);
                                           boolean jjtc001 = true;
                                           jjtree.openNodeScope(jjtn001);
      try {
        xor();
      } catch (Throwable jjte001) {
                                           if (jjtc001) {
                                             jjtree.clearNodeScope(jjtn001);
                                             jjtc001 = false;
                                           } else {
                                             jjtree.popNode();
                                           }
                                           if (jjte001 instanceof RuntimeException) {
                                             {if (true) throw (RuntimeException)jjte001;}
                                           }
                                           if (jjte001 instanceof ParseException) {
                                             {if (true) throw (ParseException)jjte001;}
                                           }
                                           {if (true) throw (Error)jjte001;}
      } finally {
                                           if (jjtc001) {
                                             jjtree.closeNodeScope(jjtn001,  2);
                                           }
      }
    }
  }

  final public void disjunction() throws ParseException {
    conjunction();
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OR:
        ;
        break;
      default:
        jj_la1[4] = jj_gen;
        break label_3;
      }
      jj_consume_token(OR);
                                                   ASTdisjunction jjtn001 = new ASTdisjunction(JJTDISJUNCTION);
                                                   boolean jjtc001 = true;
                                                   jjtree.openNodeScope(jjtn001);
      try {
        conjunction();
      } catch (Throwable jjte001) {
                                                   if (jjtc001) {
                                                     jjtree.clearNodeScope(jjtn001);
                                                     jjtc001 = false;
                                                   } else {
                                                     jjtree.popNode();
                                                   }
                                                   if (jjte001 instanceof RuntimeException) {
                                                     {if (true) throw (RuntimeException)jjte001;}
                                                   }
                                                   if (jjte001 instanceof ParseException) {
                                                     {if (true) throw (ParseException)jjte001;}
                                                   }
                                                   {if (true) throw (Error)jjte001;}
      } finally {
                                                   if (jjtc001) {
                                                     jjtree.closeNodeScope(jjtn001,  2);
                                                   }
      }
    }
  }

  final public void implication() throws ParseException {
    disjunction();
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IMPLICATION:
        ;
        break;
      default:
        jj_la1[5] = jj_gen;
        break label_4;
      }
      jj_consume_token(IMPLICATION);
                                                            ASTimplication jjtn001 = new ASTimplication(JJTIMPLICATION);
                                                            boolean jjtc001 = true;
                                                            jjtree.openNodeScope(jjtn001);
      try {
        disjunction();
      } catch (Throwable jjte001) {
                                                            if (jjtc001) {
                                                              jjtree.clearNodeScope(jjtn001);
                                                              jjtc001 = false;
                                                            } else {
                                                              jjtree.popNode();
                                                            }
                                                            if (jjte001 instanceof RuntimeException) {
                                                              {if (true) throw (RuntimeException)jjte001;}
                                                            }
                                                            if (jjte001 instanceof ParseException) {
                                                              {if (true) throw (ParseException)jjte001;}
                                                            }
                                                            {if (true) throw (Error)jjte001;}
      } finally {
                                                            if (jjtc001) {
                                                              jjtree.closeNodeScope(jjtn001,  2);
                                                            }
      }
    }
  }

  final public void xor() throws ParseException {
    sentence();
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case XOR:
        ;
        break;
      default:
        jj_la1[6] = jj_gen;
        break label_5;
      }
      jj_consume_token(XOR);
                                         ASTxor jjtn001 = new ASTxor(JJTXOR);
                                         boolean jjtc001 = true;
                                         jjtree.openNodeScope(jjtn001);
      try {
        sentence();
      } catch (Throwable jjte001) {
                                         if (jjtc001) {
                                           jjtree.clearNodeScope(jjtn001);
                                           jjtc001 = false;
                                         } else {
                                           jjtree.popNode();
                                         }
                                         if (jjte001 instanceof RuntimeException) {
                                           {if (true) throw (RuntimeException)jjte001;}
                                         }
                                         if (jjte001 instanceof ParseException) {
                                           {if (true) throw (ParseException)jjte001;}
                                         }
                                         {if (true) throw (Error)jjte001;}
      } finally {
                                         if (jjtc001) {
                                           jjtree.closeNodeScope(jjtn001,  2);
                                         }
      }
    }
  }

  final public void sentence() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TRUE:
    case FALSE:
      truthvalue();
      break;
    case NAME:
      predicate();
      break;
    case NOT:
      negation();
      break;
    case 2:
      jj_consume_token(2);
      formular();
      jj_consume_token(3);
      break;
    case EXISTS:
    case FORALL:
      quantification();
      break;
    case BOX:
      box();
      break;
    case DIAMOND:
      diamond();
      break;
    default:
      jj_la1[7] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public SimpleNode term() throws ParseException {
                     SimpleNode n = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 4:
    case 5:
    case 6:
      n = variable();
      break;
    case 10:
      n = constant();
      break;
    case FNAME:
      n = function();
      break;
    default:
      jj_la1[8] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                                                                                                  {if (true) return n;}
    throw new Error("Missing return statement in function");
  }

  final public ASTvariable variable() throws ParseException {
                                   /*@bgen(jjtree) variable */
                                   ASTvariable jjtn000 = new ASTvariable(JJTVARIABLE);
                                   boolean jjtc000 = true;
                                   jjtree.openNodeScope(jjtn000);Token t; Token i;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 4:
        t = jj_consume_token(4);
        break;
      case 5:
        t = jj_consume_token(5);
        break;
      case 6:
        t = jj_consume_token(6);
        break;
      default:
        jj_la1[9] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                                                                                       jjtn000.setName(t.image);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 7:
        jj_consume_token(7);
        i = index();
                                                                                                                                      jjtn000.setIndex(i.image);
        break;
      default:
        jj_la1[10] = jj_gen;
        ;
      }
                                                                                                                                                                        jjtree.closeNodeScope(jjtn000, true);
                                                                                                                                                                        jjtc000 = false;
                                                                                                                                                                        {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
                                                          if (jjtc000) {
                                                            jjtree.clearNodeScope(jjtn000);
                                                            jjtc000 = false;
                                                          } else {
                                                            jjtree.popNode();
                                                          }
                                                          if (jjte000 instanceof RuntimeException) {
                                                            {if (true) throw (RuntimeException)jjte000;}
                                                          }
                                                          if (jjte000 instanceof ParseException) {
                                                            {if (true) throw (ParseException)jjte000;}
                                                          }
                                                          {if (true) throw (Error)jjte000;}
    } finally {
                                                          if (jjtc000) {
                                                            jjtree.closeNodeScope(jjtn000, true);
                                                          }
    }
    throw new Error("Missing return statement in function");
  }

  final public Token index() throws ParseException {
                 Token t;
    t = jj_consume_token(INT);
                                      {if (true) return t;}
    throw new Error("Missing return statement in function");
  }

  final public void predicate() throws ParseException {
 /*@bgen(jjtree) predicate */
        ASTpredicate jjtn000 = new ASTpredicate(JJTPREDICATE);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);ASTpredicatename predicatename;
        SimpleNode aterm;
    try {
      predicatename = predicatename();
                                    jjtn000.setPredicate(predicatename);
      jj_consume_token(2);
      aterm = term();
                                                                                                jjtn000.addTerm(aterm);
      label_6:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 8:
          ;
          break;
        default:
          jj_la1[11] = jj_gen;
          break label_6;
        }
        jj_consume_token(8);
        aterm = term();
                                                                                                                                                jjtn000.addTerm(aterm);
      }
      jj_consume_token(3);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public ASTpredicatename predicatename() throws ParseException {
 /*@bgen(jjtree) predicatename */
  ASTpredicatename jjtn000 = new ASTpredicatename(JJTPREDICATENAME);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token arity;
  Token index;
  Token name;
    try {
      name = jj_consume_token(NAME);
                    jjtn000.setName(name.image);
      jj_consume_token(9);
      arity = index();
    jjtn000.setArity(arity.image);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 7:
        jj_consume_token(7);
        index = index();
                                                            jjtn000.setIndex(index.image);
        break;
      default:
        jj_la1[12] = jj_gen;
        ;
      }
   jjtree.closeNodeScope(jjtn000, true);
   jjtc000 = false;
   {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  final public ASTconstant constant() throws ParseException {
                                    /*@bgen(jjtree) constant */
                                    ASTconstant jjtn000 = new ASTconstant(JJTCONSTANT);
                                    boolean jjtc000 = true;
                                    jjtree.openNodeScope(jjtn000);Token n; Token i;
    try {
      n = jj_consume_token(10);
                                                                   jjtn000.setName(n.image);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 7:
        jj_consume_token(7);
        i = index();
                                                                                                                 jjtn000.setIndex(i.image);
        break;
      default:
        jj_la1[13] = jj_gen;
        ;
      }
                                                                                                                                                   jjtree.closeNodeScope(jjtn000, true);
                                                                                                                                                   jjtc000 = false;
                                                                                                                                                   {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
                                                           if (jjtc000) {
                                                             jjtree.clearNodeScope(jjtn000);
                                                             jjtc000 = false;
                                                           } else {
                                                             jjtree.popNode();
                                                           }
                                                           if (jjte000 instanceof RuntimeException) {
                                                             {if (true) throw (RuntimeException)jjte000;}
                                                           }
                                                           if (jjte000 instanceof ParseException) {
                                                             {if (true) throw (ParseException)jjte000;}
                                                           }
                                                           {if (true) throw (Error)jjte000;}
    } finally {
                                                           if (jjtc000) {
                                                             jjtree.closeNodeScope(jjtn000, true);
                                                           }
    }
    throw new Error("Missing return statement in function");
  }

  final public ASTfunction function() throws ParseException {
 /*@bgen(jjtree) function */
    ASTfunction jjtn000 = new ASTfunction(JJTFUNCTION);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);ASTfunctionname functionname;
        SimpleNode aterm;
    try {
      functionname = functionname();
                                  jjtn000.setFunction(functionname);
      jj_consume_token(2);
      aterm = term();
                                                                                            jjtn000.addTerm(aterm);
      label_7:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 8:
          ;
          break;
        default:
          jj_la1[14] = jj_gen;
          break label_7;
        }
        jj_consume_token(8);
        aterm = term();
                                                                                                                                            jjtn000.addTerm(aterm);
      }
      jj_consume_token(3);
                                                                                                                                                                                jjtree.closeNodeScope(jjtn000, true);
                                                                                                                                                                                jjtc000 = false;
                                                                                                                                                                                {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  final public ASTfunctionname functionname() throws ParseException {
 /*@bgen(jjtree) functionname */
  ASTfunctionname jjtn000 = new ASTfunctionname(JJTFUNCTIONNAME);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token arity;
  Token index;
  Token name;
    try {
      name = jj_consume_token(FNAME);
                     jjtn000.setName(name.image);
      jj_consume_token(9);
      arity = index();
                                                                          jjtn000.setArity(arity.image);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 7:
        jj_consume_token(7);
        index = index();
                                                                                                                                  jjtn000.setIndex(index.image);
        break;
      default:
        jj_la1[15] = jj_gen;
        ;
      }
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  final public void quantification() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case FORALL:
      allquantor();
      break;
    case EXISTS:
      existencequantor();
      break;
    default:
      jj_la1[16] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void allquantor() throws ParseException {
                                   /*@bgen(jjtree) #allquantor( 2) */
  ASTallquantor jjtn000 = new ASTallquantor(JJTALLQUANTOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(FORALL);
      variable();
      sentence();
    } catch (Throwable jjte000) {
                                         if (jjtc000) {
                                           jjtree.clearNodeScope(jjtn000);
                                           jjtc000 = false;
                                         } else {
                                           jjtree.popNode();
                                         }
                                         if (jjte000 instanceof RuntimeException) {
                                           {if (true) throw (RuntimeException)jjte000;}
                                         }
                                         if (jjte000 instanceof ParseException) {
                                           {if (true) throw (ParseException)jjte000;}
                                         }
                                         {if (true) throw (Error)jjte000;}
    } finally {
                                         if (jjtc000) {
                                           jjtree.closeNodeScope(jjtn000,  2);
                                         }
    }
  }

  final public void existencequantor() throws ParseException {
                                                /*@bgen(jjtree) #existencequantor( 2) */
  ASTexistencequantor jjtn000 = new ASTexistencequantor(JJTEXISTENCEQUANTOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(EXISTS);
      variable();
      sentence();
    } catch (Throwable jjte000) {
                                                      if (jjtc000) {
                                                        jjtree.clearNodeScope(jjtn000);
                                                        jjtc000 = false;
                                                      } else {
                                                        jjtree.popNode();
                                                      }
                                                      if (jjte000 instanceof RuntimeException) {
                                                        {if (true) throw (RuntimeException)jjte000;}
                                                      }
                                                      if (jjte000 instanceof ParseException) {
                                                        {if (true) throw (ParseException)jjte000;}
                                                      }
                                                      {if (true) throw (Error)jjte000;}
    } finally {
                                                      if (jjtc000) {
                                                        jjtree.closeNodeScope(jjtn000,  2);
                                                      }
    }
  }

  final public void box() throws ParseException {
                      /*@bgen(jjtree) #box( 1) */
  ASTbox jjtn000 = new ASTbox(JJTBOX);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(BOX);
      sentence();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000,  1);
    }
    }
  }

  final public void diamond() throws ParseException {
                              /*@bgen(jjtree) #diamond( 1) */
  ASTdiamond jjtn000 = new ASTdiamond(JJTDIAMOND);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(DIAMOND);
      sentence();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000,  1);
    }
    }
  }

//////SimpleNode Start() ://{}//{//  Expression() ";"//  {//    return jjtThis;//  }//}////void Expression() ://{}//{//  AdditiveExpression()//}////void AdditiveExpression() ://{}//{//  MultiplicativeExpression()//  (//    (//      "+"//    | "-"//    )//    MultiplicativeExpression()//  )*//}////void MultiplicativeExpression() ://{}//{//  UnaryExpression()//  (//    (//      "*"//    | "/"//    | "%"//    )//    UnaryExpression()//  )*//}  final public void Integer() throws ParseException {
    jj_consume_token(INT);
  }

  /** Generated Token Manager. */
  public crflangTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[17];
  static private int[] jj_la1_0;
  static {
      jj_la1_init_0();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x3,0x6000000,0x1000000,0x40000,0x20000,0x800000,0x100000,0x1e688004,0x10470,0x70,0x80,0x100,0x80,0x80,0x100,0x80,0x600000,};
   }

  /** Constructor with InputStream. */
  public crflang(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public crflang(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new crflangTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 17; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 17; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public crflang(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new crflangTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 17; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 17; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public crflang(crflangTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 17; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(crflangTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 17; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[29];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 17; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 29; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

//  public static void main(String args [])//  {//    System.out.println("Reading from standard input...");//    System.out.print("Enter an expression like \"1+(2+3)*var;\" :");//    new crflang(System.in);//    try//    {//      SimpleNode n = crflang.predLogic();//      n.dump("");//      System.out.println("Thank you.");//    }//    catch (Exception e)//    {//      System.out.println("Oops.");//      System.out.println(e.getMessage());//    }//    catch (Error e)//    {//      System.out.println("Oops.");//      System.out.println(e.getMessage());//    }//  }}
